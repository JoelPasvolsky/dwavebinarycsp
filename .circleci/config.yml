version: 2.1

orbs:
  win: circleci/windows@5.0

jobs:
  test-linux:
    parameters:
      python-version:
        type: string
      pip-constraints:
        type: string

    docker:
      - image: python:<< parameters.python-version >>

    steps:
      - checkout

      - restore_cache: &restore-cache-env
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &create-virtualenv
          name: Create virtual environment
          command: |
            python -m venv env

      - run: &install-requirements
          name: Install requirements
          command: |
            . env/bin/activate
            pip install -U pip wheel twine setuptools
            pip install -r requirements.txt -r tests/requirements.txt

      - save_cache: &save-cache-env
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - ~/.cache/pip

      - run: &build-package
          name: Build package
          command: env/bin/python setup.py sdist bdist_wheel

      - run:
          name: Install package (with constraints)
          command: |
            . env/bin/activate
            pip install . -c <(printf '%s\n' << parameters.pip-constraints >>)

      - run: &run-python-tests
          name: Run Python tests
          command: env/bin/coverage run -m unittest discover

      - run:
          name: Upload code coverage
          command: |
            . env/bin/activate
            codecov     # calls `coverage xml`, so we must activate venv

  test-macos:
    parameters:
      python-version:
        type: string
      xcode:
        type: string

    macos:
      xcode: << parameters.xcode >>

    steps:
      - checkout

      # install `python-version` and cache it
      - run:
          name: Install pyenv
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install pyenv

      - restore_cache: &restore-cache-pyenv
          keys:
            - v1-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-<< parameters.xcode >>

      - run: &pyenv-install-python
          name: Install python
          command: pyenv install << parameters.python-version >> -s

      - run:
          name: Set system python
          command: |
            echo -e '\n\n# Initialize pyenv' >> ~/.bash_profile
            echo 'eval "$(pyenv init --path 2>/dev/null || true)"' >> ~/.bash_profile
            echo 'eval "$(pyenv init -)"' >> ~/.bash_profile
            pyenv global << parameters.python-version >>

      - save_cache: &save-cache-pyenv
          key: v1-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-<< parameters.xcode >>
          paths:
            - ~/.pyenv

      # install dependencies and cache them
      - restore_cache: *restore-cache-env

      - run: *create-virtualenv

      - run: *install-requirements

      - save_cache: *save-cache-env

      - run: &install-package
          name: Install package
          command: env/bin/pip install .

      - run: *run-python-tests

  test-win:
    parameters:
      python-version:
        type: string

    executor:
      name: win/default

    steps:
      - checkout

      - run:
          name: Install python and create virtualenv
          shell: bash -eo pipefail
          command: |
            # resolve python MAJOR.MINOR version to latest MAJOR.MINOR.PATCH version available on NuGet
            full_version=$(
              curl -s 'https://azuresearch-usnc.nuget.org/query?q=python' \
              | jq -r '.data[] | select(.id == "python") .versions[] | .version' \
              | awk -F. -v ver='<< parameters.python-version >>' \
                  'index($0, ver".") == 1 && $3 >= m { m = $3; v = $0 } END { print v }'
            )
            nuget install python -Version "$full_version" -ExcludeVersion
            python/tools/python -V
            python/tools/python -m venv env

      - run:
          name: Install dependencies
          command: |
            env\Scripts\activate.ps1
            python --version
            pip install -r requirements.txt
            pip install -r tests\requirements.txt

      - run:
          name: Run unittests
          command: |
            env\Scripts\activate.ps1
            python -m unittest discover

  test-docs:
    docker:
      - image: python:3.9

    steps:
      - checkout

      - restore_cache: *restore-cache-env

      - run: *create-virtualenv

      - run:
          name: Install requirements
          command: |
            . env/bin/activate
            pip install -U pip wheel twine setuptools
            pip install -r requirements.txt -r tests/requirements.txt -r docs/requirements.txt

      - save_cache: *save-cache-env

      - run: *install-package

      - run:
          name: Build docs
          command: |
            . env/bin/activate
            make -C docs/ html

      - store_artifacts:
          path: ./docs/_build/html

      - run:
          name: Test docs
          command: |
            . env/bin/activate
            make -C docs/ doctest

      - run:
          name: Test links
          command: |
            . env/bin/activate
            make -C docs/ linkcheck

  pypi-deploy:
    docker:
      - image: python:3.9

    steps:
      - checkout

      - restore_cache: *restore-cache-env

      - run: *create-virtualenv

      - run: *install-requirements

      - save_cache: *save-cache-env

      - run: *build-package

      - store_artifacts:
          path: ./dist

      - run:
          name: Upload package to PyPI
          command: env/bin/twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" --skip-existing ./dist/*

workflows:
  test:
    jobs:
      - test-linux:
          name: test-linux-<< matrix.python-version >> | << matrix.pip-constraints >>
          matrix:
            parameters:
              python-version: &python-versions ["3.9", "3.10", "3.11", "3.12", "3.12"]
              # Oldest and latest. The NumPy is needed because otherwise networkx==2.4 throws exceptions
              pip-constraints: ["dimod==0.10.9 networkx==2.4 penaltymodel==1.0.0 numpy==1.20.0",
                                "dimod networkx penaltymodel"]
            exclude:
                # dimod 0.10.9 only support Python < 3.10
                - python-version: "3.10"
                  pip-constraints: "dimod==0.10.9 networkx==2.4 penaltymodel==1.0.0 numpy==1.20.0"
                - python-version: "3.11"
                  pip-constraints: "dimod==0.10.9 networkx==2.4 penaltymodel==1.0.0 numpy==1.20.0"
                - python-version: "3.12"
                  pip-constraints: "dimod==0.10.9 networkx==2.4 penaltymodel==1.0.0 numpy==1.20.0"
                - python-version: "3.13"
                  pip-constraints: "dimod==0.10.9 networkx==2.4 penaltymodel==1.0.0 numpy==1.20.0"
      - test-macos:
          name: test-macos-<< matrix.python-version >>
          matrix:
            parameters:
              python-version: *python-versions
              xcode: ["16.2.0"]
      - test-win:
          matrix:
            parameters:
              python-version: *python-versions
      - test-docs

  deploy:
    jobs:
      - pypi-deploy:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
