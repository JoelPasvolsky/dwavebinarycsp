version: 2.1
jobs:
  test-linux:
    parameters:
      dimod-version:
        type: string
      python-version:
        type: string
    docker:
      - image: circleci/python:<< parameters.python-version >>

    working_directory: ~/repo

    steps:

      - checkout

      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ checksum "docs/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run:
          name: create virtualenv
          command: |
            python -m virtualenv env

      - run:
          name: install dependencies
          command: |
            . env/bin/activate
            python --version
            pip install -r requirements.txt -r tests/requirements.txt -r docs/requirements.txt
            pip install --upgrade 'dimod<< parameters.dimod-version >>'

      - save_cache:
          paths:
            - ./env
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ checksum "docs/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &run-tests-template
          name: run unittests
          command: |
            . env/bin/activate
            python --version
            coverage run -m unittest discover

      - run:
          name: codecov
          command: |
            . env/bin/activate
            codecov

      - run:
          name: doctest
          command: |
            . env/bin/activate
            make -C docs/ doctest

      - run:
          name: linkcheck
          command: |
            . env/bin/activate
            make -C docs/ linkcheck

  test-osx:
    parameters:
      python-version:
        type: string
    macos:
      xcode: 13.2.0
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: install pyenv
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install pyenv

      - restore_cache:
          keys:
            - pyenv-{{ .Environment.CIRCLE_JOB }}-xcode13.2.0

      - run:
          name: install python
          command: |
            pyenv install << parameters.python-version>> -s

      - save_cache:
          paths:
            - ~/.pyenv
          key: pyenv-{{ .Environment.CIRCLE_JOB }}-xcode13.2.0

      - run:
          name: create virtualenv
          command: |
            eval "$(pyenv init --path)"
            eval "$(pyenv init -)"
            pyenv local << parameters.python-version >>
            python -m pip install virtualenv
            python -m virtualenv env

      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run:
          name: install dependencies
          command: |
            . env/bin/activate
            python --version
            pip install -r requirements.txt -r tests/requirements.txt

      - save_cache:
          paths:
            - ./env
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: *run-tests-template

  deploy:
    docker:
      - image: circleci/python:3.8-buster

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: create virtualenv
          command: |
            python -m virtualenv env

      - run:
          name: install dependencies
          command: |
            . env/bin/activate
            python --version
            pip install -r requirements.txt -r tests/requirements.txt -r docs/requirements.txt

      - run:
          name: install twine
          command: |
            . env/bin/activate
            pip install twine

      - run:
          name: verify version matches tag
          command: |
            . env/bin/activate
            pip install .
            echo $CIRCLE_TAG
            [[ "$(pip show dwavebinarycsp 2>/dev/null | grep Version)" == "Version: $CIRCLE_TAG" ]]

      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = dwtools-ci" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc

      - run:
          name: build sdist and bdist
          command: |
            . env/bin/activate
            python setup.py sdist
            python setup.py bdist_wheel

      - run:
          name: upload
          command: |
            . env/bin/activate
            twine upload dist/*

workflows:
  version: 2
  test:
    jobs:
      - test-linux:
          name: test-linux-<< matrix.python-version >>-dimod<< matrix.dimod-version >>
          matrix:
            parameters:
              python-version: &python-versions [3.7.9, 3.8.9, 3.9.4, 3.10.0]
              dimod-version: [==0.10.9, ~=0.10.0, ==0.11.0rc1]
      - test-osx:
          name: test-osx-<< matrix.python-version >>
          matrix:
            parameters:
              python-version: *python-versions
      - deploy:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              ignore: /.*/
